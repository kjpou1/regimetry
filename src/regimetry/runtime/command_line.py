import argparse

from regimetry.models.command_line_args import CommandLineArgs

from .logging_argument_parser import LoggingArgumentParser


class CommandLine:
    @staticmethod
    def parse_arguments() -> CommandLineArgs:
        """
        Parse command-line arguments and return a CommandLineArgs object.

        Supports subcommands like 'ingest' and 'train'.
        """
        parser = LoggingArgumentParser(description="Frostfire Chart Sifter Application")

        # Create subparsers for subcommands
        subparsers = parser.add_subparsers(dest="command", help="Subcommands")

        # Subcommand: ingest
        ingest_parser = subparsers.add_parser(
            "ingest", help="Run ingestion pipeline with optional config overrides."
        )
        ingest_parser.add_argument(
            "--signal-input-path",
            type=str,
            help="Path to the signal-enriched input CSV file (overrides config or .env)",
        )
        ingest_parser.add_argument(
            "--config",
            type=str,
            required=False,
            help="Path to the configuration file for ingestion.",
        )
        ingest_parser.add_argument(
            "--debug",
            action="store_true",
            help="Enable debug mode during ingestion.",
        )

        # Subcommand: embed (was "train")
        embed_parser = subparsers.add_parser(
            "embed", help="Generate transformer embeddings for clustering or visualization."
        )
        embed_parser.add_argument(
            "--signal-input-path",
            type=str,
            help="Path to the signal-enriched input CSV file (overrides config or .env)",
        )
        embed_parser.add_argument(
            "--window-size",
            type=int,
            default=None,
            help="Size of each rolling window for embedding (default: 30)",
        )
        embed_parser.add_argument(
            "--stride",
            type=int,
            default=None,
            help="Stride between rolling windows (default: 1)",
        )
        embed_parser.add_argument(
            "--encoding-method",
            type=str,
            choices=["sinusoidal", "learnable"],
            default=None,
            help="Type of positional encoding to use (default: sinusoidal)."
        )

        embed_parser.add_argument(
            "--encoding-style",
            type=str,
            choices=["interleaved", "stacked"],
            default=None,
            help="Sinusoidal encoding style: 'interleaved' (Vaswani) or 'stacked'."
        )

        embed_parser.add_argument(
            "--embedding-dim",
            type=int,
            default=None,
            help="Dimensionality of learnable positional encoding (required if method=learnable)."
        )

        embed_parser.add_argument(
            "--config",
            type=str,
            required=False,
            default="config/embedding_config.yaml",  # or leave as model_config.yaml
            help="Path to the configuration file for embedding pipeline.",
        )
        embed_parser.add_argument(
            "--output-name",
            type=str,
            required=False,
            help="Optional name for the saved embeddings file (default: embeddings.npy)",
        )
        embed_parser.add_argument(
            "--debug",
            action="store_true",
            help="Enable debug mode during embedding.",
        )

        # Subcommand: cluster
        cluster_parser = subparsers.add_parser(
            "cluster", help="Cluster transformer embeddings and visualize market regimes."
        )
        cluster_parser.add_argument(
            "--embedding-path",
            type=str,
            required=False,
            help="Path to the .npy embedding file generated by the embedding pipeline.",
        )
        cluster_parser.add_argument(
            "--regime-data-path",
            type=str,
            required=False,
            help="Path to the signal-enriched regime input CSV (e.g., regime_input.csv).",
        )
        cluster_parser.add_argument(
            "--output-dir",
            type=str,
            required=False,
            help="Directory to save cluster visualizations and merged output CSV.",
        )
        cluster_parser.add_argument(
            "--window-size",
            type=int,
            default=30,
            help="Window size used during embedding. Used to align clusters to regime data.",
        )
        cluster_parser.add_argument(
            "--n-clusters",
            type=int,
            default=None,
            help="Number of clusters for spectral clustering.",
        )
        cluster_parser.add_argument(
            "--config",
            type=str,
            required=False,
            help="Path to a config.yaml file defining clustering parameters.",
        )


        # Parse the arguments
        args = parser.parse_args()

        # Check if a subcommand was provided
        if args.command is None:
            parser.print_help()
            exit(1)

        # Return a CommandLineArgs object with parsed values
        return CommandLineArgs(
            command=args.command,
            config=args.config,
            debug=getattr(args, "debug", False),
            signal_input_path=getattr(args, "signal_input_path", None),
            output_name=getattr(args, "output_name", None),

            # Embedding and clustering shared args
            embedding_path=getattr(args, "embedding_path", None),
            regime_data_path=getattr(args, "regime_data_path", None),
            output_dir=getattr(args, "output_dir", None),
            window_size=getattr(args, "window_size", None),  # Leave as None to allow Config fallback
            stride=getattr(args, "stride", None),
            n_clusters=getattr(args, "n_clusters", None),

            # Positional Encoding overrides
            encoding_method=getattr(args, "encoding_method", None),
            encoding_style=getattr(args, "encoding_style", None),
            embedding_dim=getattr(args, "embedding_dim", None),
        )

